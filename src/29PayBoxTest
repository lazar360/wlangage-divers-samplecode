/////////////////
//Classe MClient
///////////////////
MClient est une Classe <MAPPING=Client>

	// Le code se trouvant entre <MAPPING> et <FIN> est généré automatiquement.
	// Il sera effacé et recréé entièrement à chaque génération depuis le menu contextuel
	// du fichier dans l'explorateur de projet ou dans l'analyse "..Regénérer la classe modèle"
	<MAPPING>
	m_IDclient		est une chaîne	<MAPPING=IDclient, clé unique>
	m_surname		est une chaîne	<MAPPING=surname>
	m_first_name	est une chaîne	<MAPPING=first_name>
	m_company		est une chaîne	<MAPPING=company>
	m_email_address	est une chaîne	<MAPPING=email_address>
	m_language		est une chaîne	<MAPPING=language>
	m_job_function	est une chaîne	<MAPPING=job_function>
	m_address		est une chaîne	<MAPPING=address>
	m_postal_code	est une chaîne	<MAPPING=postal_code>
	m_city			est une chaîne	<MAPPING=city>
	m_country		est une chaîne	<MAPPING=country>
	m_phone_prefix	est une chaîne	<MAPPING=phone_prefix>
	m_phone			est une chaîne	<MAPPING=phone>
	m_mobile_prefix	est une chaîne	<MAPPING=mobile_prefix>
	m_mobile		est une chaîne	<MAPPING=mobile>
	m_tax_number	est une chaîne	<MAPPING=tax_number>
	m_passport		est une chaîne	<MAPPING=passport>
	m_pec			est une chaîne	<MAPPING=pec>
	m_id_code		est une chaîne	<MAPPING=id_code>
	m_client_number	est une chaîne	<MAPPING=client_number>
	m_comments		est une chaîne	<MAPPING=comments>
	<FIN>
	
FIN

PROCÉDURE Constructeur(surname est une chaîne ="" ...
						,first_name est une chaîne ="" ... 
						,company est une chaîne ="" ... 
						,email_address est une chaîne ="" ... 
						,language est une chaîne ="" ... 
						,job_function est une chaîne ="" ... 
						,address est une chaîne ="" ... 
						,postal_code est une chaîne ="" ... 
						,city est une chaîne ="" ... 
						,country est une chaîne ="" ... 
						,phone_prefix est une chaîne ="" ... 
						,phone est une chaîne ="" ... 
						,mobile_prefix est une chaîne ="" ... 
						,mobile est une chaîne ="" ... 
						,tax_number est une chaîne ="" ... 
						,passport est une chaîne ="" ... 
						,pec est une chaîne ="" ... 
						,id_code est une chaîne ="" ... 
						,client_number est une chaîne ="" ... 
						,comments est une chaîne ="" ... 
						)

		SI surname <> "" ALORS 		:m_surname = surname
		SI first_name <> "" ALORS 		:m_first_name = first_name
		SI company <> "" ALORS 		:m_company = company
		SI email_address <> "" ALORS 	:m_email_address = email_address
		SI language <> "" ALORS 		:m_language = language
		SI job_function <> "" ALORS 	:m_job_function = job_function
		SI address <> "" ALORS 		:m_address = address
		SI postal_code <> "" ALORS 	:m_postal_code = postal_code
		SI city <> "" ALORS 			:m_city = city
		SI country <> "" ALORS 		:m_country = country // doit comprendre 3 caractères et être au format iso
		SI phone_prefix <> "" ALORS 	:m_phone_prefix = phone_prefix
		SI phone <> "" ALORS 			:m_phone = phone
		SI mobile_prefix <> "" ALORS 	:m_mobile_prefix = mobile_prefix
		SI mobile <> "" ALORS 			:m_mobile = mobile
		SI tax_number <> "" ALORS 		:m_tax_number = tax_number
		SI passport <> "" ALORS 		:m_passport = passport
		SI pec <> "" ALORS 			:m_pec = pec
		SI id_code <> "" ALORS 		:m_id_code = id_code
		SI client_number <> "" ALORS 	:m_client_number = client_number
		SI comments <> "" ALORS 		:m_comments = comments


PROCÉDURE enVariant()

vElement est un Variant

SI :m_IDclient <> "" ALORS
	vElement["IDclient"] 	= :m_IDclient
FIN
vElement["surname"]			= :m_surname
vElement["first_name"]		= :m_first_name
vElement["company"]			= :m_company
vElement["email_address"]	= :m_email_address
vElement["language"]		= :m_language
vElement["job_function"]	= :m_job_function
vElement["address"]			= :m_address
vElement["postal_code"]		= :m_postal_code
vElement["city"]			= :m_city 
vElement["country"]			= :m_country // 3 caractères seulement en iso format
vElement["phone_prefix"]	= :m_phone_prefix
vElement["phone"]			= :m_phone
vElement["mobile_prefix"]	= :m_mobile_prefix
vElement["mobile"]			= :m_mobile 
vElement["tax_number"]		= :m_tax_number
vElement["passport"]		= :m_passport
vElement["pec"]				= :m_pec
vElement["id_code"]			= :m_id_code
vElement["client_number"]	= :m_client_number
vElement["comments"]		= :m_comments

RENVOYER vElement

PROCÉDURE ALeNumeroPayBox(IDclientPayBoxRecupere est une chaîne)
:m_IDclient = IDclientPayBoxRecupere

estCree est un booléen

// si IDclientPayBoxRecupere, on est en création
SI IDclientPayBoxRecupere <> "" ALORS 
	
	Client.IDclient 		= IDclientPayBoxRecupere
	estCree 				= Vrai
	
FIN

Client.surname 			= :m_surname			
Client.first_name 		= :m_first_name		
Client.company 			= :m_company		
Client.email_address 	= :m_email_address		
Client.language 		= :m_language			
Client.job_function 	= :m_job_function		
Client.address 			= :m_address		
Client.postal_code 		= :m_postal_code	
Client.city 			= :m_city				
Client.country 			= :m_country		
Client.phone_prefix 	= :m_phone_prefix		
Client.phone 			= :m_phone				
Client.mobile_prefix 	= :m_mobile_prefix		
Client.mobile 			= :m_mobile			
Client.tax_number 		= :m_tax_number		
Client.passport 		= :m_passport			
Client.pec 				= :m_pec			
Client.id_code 			= :m_id_code			
Client.client_number 	= :m_client_number		
Client.comments 		= :m_comments			

SI estCree ALORS
	HAjoute(Client)
SINON
	HModifie(Client)
FIN

PROCÉDURE recupereIDParSonNom(nomDuClientToGet est une chaîne):chaîne

SI HLitRecherchePremier(Client,surname,nomDuClientToGet) ALORS

	RENVOYER Client.IDclient

FIN

RENVOYER ""

PROCÉDURE versMClientParIDClient(param_idClient est une chaîne):MClient

SI HLitRecherchePremier(Client,IDclient,param_idClient)ALORS
	
	leClientArenvoyer est un MClient(Client.IDclient,Client.surname,Client.first_name,...
								  Client.company,Client.email_address,Client.language,...
								  Client.job_function, Client.address,Client.postal_code,...
								  Client.city,Client.country,Client.phone_prefix,...
								  Client.phone, Client.mobile_prefix, Client.mobile,...
								  Client.tax_number, Client.passport, Client.pec,...
								  Client.id_code, Client.client_number, Client.comments)
	RENVOYER leClientArenvoyer

FIN

leClientArenvoyer est un MClient()

RENVOYER leClientArenvoyer

////////////
// Bouton AccessRights : clic
////////////////

sApplicationKey	est une chaîne	= "..."
sSecretKey		est une chaîne	= "..."

sBody est une chaîne = ""

sBaseUrl	est une chaîne				= "https://www.payboxmail.com/api/v1.0/"

sPath		est une chaîne				= "accessrights"

sFullUrl	est une chaîne				= sBaseUrl + sPath

nTime		est un entier sur 8 octets	= DateHeureVersEpoch(DateHeureSys())

sMethod		est une chaîne				= "GET"

// Signature
sToSign		est une chaîne				= sFullUrl + "+" + sMethod + "+" + sSecretKey + "+" + sBody + "+" + nTime
sSignature	est une chaîne				= Minuscule(Remplace(BufferVersHexa(HashChaîne(HA_SHA_256,sToSign)),[Caract(32),RC],""))

Req			est une restRequête
Rep			est une restRéponse

Req.Méthode							= httpGet
Req.URL								= sFullUrl
Req.Entête["Content-Type"]			= "application/json"
Req.Entête["X-Auth-Appkey"]			= sApplicationKey
Req.Entête["X-Method-Signature"]	= "sha256"
Req.Entête["X-Auth-Signature"]		= sSignature
Req.Entête["X-Auth-Time"]			= "" + nTime

Rep									= HTTPEnvoie(Req)

SI ErreurDétectée ALORS
	Erreur("Unable to reach server - errorCode : "+ErreurInfo(errCode))
SINON
	//Trace(Rep.Contenu)
	vVariant est un Variant = JSONVersVariant(Rep.Contenu)
	// Trace("status="+vVariant["status"])
	SAI_GET_Accessrights = "status="+vVariant["status"] + RC
	
	POUR TOUT item DE vVariant["data"] 
		SAI_GET_Accessrights += "{" + "service: " + item.service + ", method: " + item.method +"}" + RC
	FIN
FIN

/////////////
// Bouton create a client 
//////////
sApplicationKey	est une chaîne	= "..."
sSecretKey		est une chaîne	= "..."

sBody est une chaîne = ""

sBaseUrl	est une chaîne				= "https://www.payboxmail.com/api/v1.0/"

sPath		est une chaîne				= "accessrights"

sFullUrl	est une chaîne				= sBaseUrl + sPath

nTime		est un entier sur 8 octets	= DateHeureVersEpoch(DateHeureSys())

sMethod		est une chaîne				= "GET"

// Signature
sToSign		est une chaîne				= sFullUrl + "+" + sMethod + "+" + sSecretKey + "+" + sBody + "+" + nTime
sSignature	est une chaîne				= Minuscule(Remplace(BufferVersHexa(HashChaîne(HA_SHA_256,sToSign)),[Caract(32),RC],""))

Req			est une restRequête
Rep			est une restRéponse

Req.Méthode							= httpGet
Req.URL								= sFullUrl
Req.Entête["Content-Type"]			= "application/json"
Req.Entête["X-Auth-Appkey"]			= sApplicationKey
Req.Entête["X-Method-Signature"]	= "sha256"
Req.Entête["X-Auth-Signature"]		= sSignature
Req.Entête["X-Auth-Time"]			= "" + nTime

Rep									= HTTPEnvoie(Req)

SI ErreurDétectée ALORS
	Erreur("Unable to reach server - errorCode : "+ErreurInfo(errCode))
SINON
	//Trace(Rep.Contenu)
	vVariant est un Variant = JSONVersVariant(Rep.Contenu)
	// Trace("status="+vVariant["status"])
	SAI_GET_Accessrights = "status="+vVariant["status"] + RC
	
	POUR TOUT item DE vVariant["data"] 
		SAI_GET_Accessrights += "{" + "service: " + item.service + ", method: " + item.method +"}" + RC
	FIN
FIN

/////////////
// Bouton Get a Client  
/////////////////
nomDuClientToGet  est une chaîne 			= SansEspace(Majuscule(SAI_GET_a_client)) 
leClient est un MClient()
idClientToGet est une chaîne				= leClient.recupereIDParSonNom(nomDuClientToGet)

sApplicationKey	est une chaîne				= "..."
sSecretKey		est une chaîne				= "..."

sBody			est une chaîne				= ""

sBaseUrl		est une chaîne				= "https://www.payboxmail.com/api/v1.0/"

sPath			est une chaîne				= "clients/"+idClientToGet

sFullUrl		est une chaîne				= sBaseUrl + sPath

nTime			est un entier sur 8 octets	= DateHeureVersEpoch(DateHeureSys())

sMethod			est une chaîne				= "GET"

// Signature
sToSign			est une chaîne				= sFullUrl + "+" + sMethod + "+" + sSecretKey + "+" + sBody + "+" + nTime
sSignature		est une chaîne				= Minuscule(Remplace(BufferVersHexa(HashChaîne(HA_SHA_256,sToSign)),[Caract(32),RC],""))

Req				est une restRequête
Rep				est une restRéponse

Req.Méthode							= httpGet
Req.URL								= sFullUrl
Req.Entête["Content-Type"]			= "application/json"
Req.Entête["X-Auth-Appkey"]			= sApplicationKey
Req.Entête["X-Method-Signature"]	= "sha256"
Req.Entête["X-Auth-Signature"]		= sSignature
Req.Entête["X-Auth-Time"]			= "" + nTime

Rep									= HTTPEnvoie(Req)

SI ErreurDétectée ALORS
	
	Erreur("Unable to reach server - errorCode : "+ErreurInfo(errCode))

SINON
	
	vVariant est un Variant = JSONVersVariant(Rep.Contenu)
	
	SI vVariant["status"] = 200 ALORS
	
		SAI_GET_a_client = ChaîneConstruit("Le client %1 - %2 avec id %3 a été récupéré de PayBox", ...
		vVariant["data"].surname, vVariant["data"].first_name, vVariant["data"].IDclient)
	
	FIN
	
FIN

////////////////
// Bouton put a client 
///////////////////
sApplicationKey	est une chaîne	= "..."
sSecretKey		est une chaîne	= "..."

utilitaire	est un MClient()

leClient est un MClient()

leClient = utilitaire.versMClientParIDClient(leClient.recupereIDParSonNom(SansEspace(Majuscule(SAI_PUT_a_client.Valeur))))

leClient.m_first_name = "TestModifié"

// InfoConstruit("Le Client n° %1 va être modifié en %2 | %3", leClient.m_IDclient,leClient.m_first_name, leClient.m_surname)

sBody		est une chaîne				= VariantVersJSON(leClient.enVariant())

sBaseUrl	est une chaîne				= "https://www.payboxmail.com/api/v1.0"

sPath		est une chaîne				= "/clients"

sFullUrl	est une chaîne				= sBaseUrl + sPath

nTime		est un entier sur 8 octets	= DateHeureVersEpoch(DateHeureSys())

sMethod		est une chaîne				= "PUT"

// Signature
sToSign		est une chaîne				= sFullUrl + "+" + sMethod + "+" + sSecretKey + "+" + sBody + "+" + nTime
sSignature	est une chaîne				= Minuscule(Remplace(BufferVersHexa(HashChaîne(HA_SHA_256,sToSign)),[Caract(32),RC],""))

Req			est une restRequête
Rep			est une restRéponse

Req.Méthode							= httpPut
Req.URL								= sFullUrl
Req.Entête["Content-Type"]			= "application/json"
Req.Entête["X-Auth-Appkey"]			= sApplicationKey
Req.Entête["X-Method-Signature"]	= "sha256"
Req.Entête["X-Auth-Signature"]		= sSignature
Req.Entête["X-Auth-Time"]			= "" + nTime
Req.Contenu							= sBody

Rep									= HTTPEnvoie(Req)

SI ErreurDétectée ALORS
	
	Erreur("Unable to reach server - errorCode : "+ErreurInfo(errCode))
	
SINON
	
	vVariant est un Variant = JSONVersVariant(Rep.Contenu)
		
	SI vVariant["status"] = 200 ALORS
		
		SAI_PUT_a_client = "status="+vVariant["status"] + RC
		
		SAI_PUT_a_client += "Le Prénom du client a été modifié"
		
		leClient.versHFQL()
		
	SINON
		
		Erreur("Erreur : ", vVariant["data"].help)
		
	FIN
FIN

//////////////
// Bouton search client
//////////////////
sApplicationKey	est une chaîne	= "..."
sSecretKey		est une chaîne	= "..."

//leClient		est un MClient("ZTEST","Test","testCompany","test@test.com","EN","testeur",...
//"rue test","12345","testCity","FRA", "33", "0123456789", "33", "0987654321",...
//"TAX123456", "P1234567890", "XYZ", "XYZ", "CLI123456", "string")
leClient		est un MClient	= leClient.versMClientParIDClient(leClient.recupereIDParSonNom("ZTEST"))
laDateMin		est une Date	= DateVersChaîne(DateDuJour(), "AAAA-MM-JJ")
laDateMax		est une Date	= DateVersChaîne(DateDuJour(), "AAAA-MM-JJ")

vElement		est un Variant
vElement["start"]				= 100
vElement["limit"]				= 25
vElement["lastID"]				= leClient.m_IDclient
vElement["creation_date_min"]	= laDateMin 
vElement["creation_date_max"]	= laDateMax
vElement["email"]				= leClient.m_email_address
vElement["mobile_phone"]		= leClient.m_mobile
vElement["client_num"]			= leClient.m_id_code 

sBody		est une chaîne				= VariantVersJSON(leClient.enVariant())

sBaseUrl	est une chaîne				= "https://www.payboxmail.com/api/v1.0"

sPath		est une chaîne				= "/clients/search"

sFullUrl	est une chaîne				= sBaseUrl + sPath

nTime		est un entier sur 8 octets	= DateHeureVersEpoch(DateHeureSys())

sMethod		est une chaîne				= "POST"

// Signature
sToSign		est une chaîne				= sFullUrl + "+" + sMethod + "+" + sSecretKey + "+" + sBody + "+" + nTime
sSignature	est une chaîne				= Minuscule(Remplace(BufferVersHexa(HashChaîne(HA_SHA_256,sToSign)),[Caract(32),RC],""))

Req			est une restRequête
Rep			est une restRéponse

Req.Méthode							= httpPost
Req.URL								= sFullUrl
Req.Entête["Content-Type"]			= "application/json"
Req.Entête["X-Auth-Appkey"]			= sApplicationKey
Req.Entête["X-Method-Signature"]	= "sha256"
Req.Entête["X-Auth-Signature"]		= sSignature
Req.Entête["X-Auth-Time"]			= "" + nTime
Req.Contenu							= sBody

Rep									= HTTPEnvoie(Req)

SI ErreurDétectée ALORS
	
	Erreur("Unable to reach server - errorCode : "+ErreurInfo(errCode))
	
SINON
	
	vVariant est un Variant = JSONVersVariant(Rep.Contenu)
	
	resultat est une chaîne
	
	POUR TOUT item DE vVariant["data"]
		resultat += "surname : " + item.surname + " | firstname: " + item.first_name 
	FIN
	
	SAI_SEARCH_clients = "status="+vVariant["status"] + RC
	
FIN






